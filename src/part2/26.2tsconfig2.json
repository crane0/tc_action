{
  "compilerOptions": {
    // 关于编译
    "incremental": true,                   /* 增量编译。在第一次编译后，会在根目录生成一个存储编译信息的文件tsconfig.tsbuildinfo，二次编译时速度会有提升 */
    "tsBuildInfoFile": "./buildFile",      /* 增量编译文件的存储位置 */
    "diagnostics": true,                   /* 打印诊断信息 */
    "target": "es5",                          /* 目标语言版本 */
    "module": "commonjs",                     /* 生成代码的模块标准 */
    "outFile": "./",                       /* 将多个相互依赖的文件生成一个文件，可以用在 AMD 模块中 */
    "lib": ["dom", "es5", "scripthost", "es2019.array"],    /* ts需要引用的类库，即声明文件，默认导入的是前3个，比如，如果使用了es2019的数组API，就需要导入 */
    "allowJs": true,                       /* 允许编译js文件（以.js  .jsx结尾），默认会编译所有的js文件，包括配置文件 */
    "checkJs": true,                       /* 允许在js文件中报错，通常与 allowJs 配置使用 */
    "outDir": "./out",                        /* 指定输出目录，所有编译后的文件都会放到这里 */
    "rootDir": "./",                       /* 指定输入文件目录（用户输出） */

   
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */

    // 关于声明文件
    "declaration": true,                   /* 生成声明文件 .d.ts */
    "declarationDir": true,                   /* 所有生成声明文件的输出目录*/
    "emitDecoratorMetadata": true,         /* 只生成声明文件（不会生成 js 文件） */
    "sourceMap": true,                     /* 生成目标文件的sourceMap */
    "inlineSourceMap": true,               /* 生成目标文件的inlineSourceMap */
    "declarationMap": true,                /* 生成声明文件的sourceMap */
    "typeRoots": [],                        /* 加载声明文件的目录，默认 node_modules/@types */
    "types": [],                            /* 加载声明文件的包 */
    "removeComments": true,                /* 删除注释 */
    "noEmit": true,                        /* 不输出文件（相当于什么都没有做） */
    "noEmitOnError": true,                        /* 当发生错误时，不输出文件 */

    // 这2个需配合使用
    "noEmitHelpers": true,                        /* 不生成 helper 函数（起辅助作用，但代码体积会增加。比如class类编译为es5时就会有），需额外安装ts-helpers。 */
    "importHelpers": true,                        /* 通过tslib 引入 helper 函数，文件必须是模块 */

    "downlevelIteration": true,            /* 降级遍历器的实现（es3/5），如果开启，比如数组的一些方法就会以es3的方式实现，可能会引入 helper 函数。 */
    
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* 类型检查的选项，如果strict为true，则下面7个默认也会是true */
    "strict": true,                           /* 开启所有的严格类型检查 */
    "alwaysStrict": true,                  /* 在代码中注入 "use strict" */
    "noImplicitAny": true,                 /* 不允许隐式的 any 类型，即函数参数必须有类型注解 */
    "strictNullChecks": true,              /* 不允许把 null undefined 赋值给其他类型变量 */
    "strictFunctionTypes": true,           /* 不允许函数参数的双向协变 */
    "strictPropertyInitialization": true,  /* 类的实例属性，必须初始化 */
    "strictBindCallApply": true,           /* 严格的 'bind', 'call', 'apply' 方法传入参数类型检查 */
    "noImplicitThis": true,                /* 不允许 this 有隐式的 any 类型 */

    /* 和函数相关的选项，只会显示错误，不会阻碍编译 */
    "noUnusedLocals": true,                /* 检查只声明未使用的，局部变量 */
    "noUnusedParameters": true,            /* 检查未使用的，函数参数 */
    "noFallthroughCasesInSwitch": true,    /* 防止 switch 语句贯穿 */
    "noImplicitReturns": true,             /* 每个分支都要有返回值（if else 2个分支也都要有） */

    /* Module Resolution Options */
    "esModuleInterop": true,               /* 如果模块以 export = 的方式导出，既可以用 import from 的方式导入，也可以用 import = 的方式导入。 */
    "allowUmdGlobalAccess": true,          /* 允许在模块中访问 UMD 全局变量 */
    "moduleResolution": "node",            /* 模块解析策略（当引入一个模块后，查找顺序，绝对相对路径也有区别），默认 node ，还可以是classic， */
    "baseUrl": "./",                       /* 解析非相对模块的基地址 */
    "paths": {"jquery": ["node_modules/jquery/dist/jquery.slim.min.js"]},     /* 路径映射（相对于baseUrl），比如指定jquery的指定版本*/
    "rootDirs": ["src", "out"],          /* 运行时，将多个目录放在一个虚拟目录下，比如在index.ts中使用相对路径引入其他的模块，但编译后的路径可能会有问题，因为index.html的位置会发生变化。如果将这2个目录放在一起，编译后也不会发生变化了。 */

    "listEmittedFiles": true,           /* 打印输出文件 */
    "listFiles": true           /* 打印编译的文件（包括引用的声明文件） */
    // "oots": [],                       /* List of folders to include type definitions from. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
  }
}
