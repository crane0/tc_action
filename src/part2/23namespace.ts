/* 
在js中，命名空间能有效的避免全局污染。
在es6引入了模块系统之后，命名空间就很少被提及了，
在ts中，依然实现了这个特性。

尽管使用模块系统后，完全不必考虑全局污染问题了，
但如果使用一些全局的类库，命名空间依旧是一个好的解决方案。
*/


/* 
js中的命名空间，
实现原理：立即执行函数+函数闭包。
将有命名空间的ts文件编译后，就可以对照查看了。
*/


/* 
原则
模块和命名空间不要混用！
不要在模块中，使用命名空间，
命名空间，最好在一个全局的环境中使用。

正确的使用方式：
先编译为js文件，在index.html中，使用script标签引入。
*/

/* 
命名空间 
使用 namespace 定义： namespace S {}
对象的调用方式: S.xx

在命名空间中，使用export可将内容抛出到全局中。

在2个ts文件中，如果定义了相同的命名空间，是会共享的。

在b.ts中，直接调用 a.ts中相同命名空间的方法（即便是export抛出的），编辑器不会报错，
但在编译b.ts时，会报错。
因为在b.ts中构成了对a.ts的引用。
需要在b.ts使用 /// <reference path="a.ts">
这时编译就不会有问题。

三斜线指令：
ts中独有的，告诉编译器在编译时，要引入额外的文件。
*/


/*  
命名空间的成员别名
在a.ts中的命名空间中，定义了一个函数circle，
在b.ts中，使用import circle = S.circle， 之后就可以直接circle()
注意，这个import和模块中的，没有一点关系。
*/